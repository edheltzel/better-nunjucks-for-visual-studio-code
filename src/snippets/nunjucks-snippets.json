{
  "Frontmatter": {
    "prefix": "--",
    "description": "Frontmatter",
    "body": [
      "---",
      "$2",
      "---"
    ]
  },
  "Block": {
    "prefix": "block",
    "body": [
      "{% block ${1:name} %}\n\t$2\n{% endblock ${1:name} %}"
    ],
    "description": "block defines a section on the template and identifies it with a name. This is used by template inheritance. Base templates can specify blocks and child templates can override them with new content."
  },
  "Complete Block": {
    "prefix": "njk",
    "body": "{% $1 %}",
    "description": "A nunjucks template block."
  },
  "Complete Variable": {
    "prefix": "{{ ",
    "body": "{{ ${1:variable} }}",
    "description": "A variable looks up a value from the template context."
  },
  "Extends": {
    "prefix": "extends",
    "body": "{% extends \"${1:template}\" %}$2",
    "description": "extends is used to specify template inheritance. The specified template is used as a base template."
  },
  "Include": {
    "prefix": "include",
    "body": "{% include \"${1:template}\" %}$2",
    "description": "Include pulls in other templates in place.It\"s useful when you need to share smaller chunks across several templates that already inherit other templates."
  },
  "Filter": {
    "prefix": "filter",
    "body": "{% filter ${1:filter} %}\n\t$2\n{% endfilter %}",
    "description": "A filter block allows you to call a filter with the contents of the block. Instead passing a value with the | syntax, the render contents from the block will be passed."
  },
  "For": {
    "prefix": "for",
    "body": "{% for ${1:item} in ${2:iterator} %}\n\t$3\n{% endfor %}",
    "description": "for iterates over arrays and dictionaries."
  },
  "asyncEach": {
    "prefix": "asyncEach",
    "body": "{% asyncEach ${1:item} in ${2:sequence} %}\n\t$3\n{% endeach %}",
    "description": "asyncEach is an asynchronous version of for. You only need this if you are using a custom template loader that is asynchronous; otherwise you will never need it. Async filters and extensions also need this, but internally loops are automatically converted into asyncEach if any async filters and extensions are used within the loop."
  },
  "asyncAll": {
    "prefix": "asyncAll",
    "body": "{% asyncAll ${1:item} in ${2:sequence} %}\n\t$3\n{% endeach %}",
    "description": "asyncAll is similar to asyncEach, except it renders all the items in parallel, preserving the order of the items. This is only helpful if you are using asynchronous filters, extensions, or loaders. Otherwise you should never use this."
  },
  "If": {
    "prefix": "if",
    "body": "{% if ${1:condition} %}\n\t$2\n{% endif %}",
    "description": "if tests a condition and lets you selectively display content. It behaves exactly as javascript\"s if behaves."
  },
  "If Else": {
    "prefix": "ife",
    "body": "{% if ${1:condition} %}\n\t$2\n{% else %}\n\t$3\n{% endif %}",
    "description": "It creates the if else block."
  },
  "If Elif": {
    "prefix": "ifel",
    "body": "{% if ${1:condition} %}\n\t$2\n{% elif ${3:condition} %}\n\t$4\n{% else %}\n\t$5\n{% endif %}",
    "description": "Alternate condition with the if block"
  },
  "Elif": {
    "prefix": "elif",
    "body": "{% elif ${1:condition} %}\n\t$2",
    "description": "Alternate condition in the if block"
  },
  "Else": {
    "prefix": "else",
    "body": "{% else ${1:condition} %}\n\t$2",
    "description": "Alternate condition in the if block"
  },
  "End If": {
    "prefix": "endif",
    "body": "{% endif %}",
    "description": "Alternate condition in the if block"
  },
  "Set Var": {
    "prefix": "set",
    "body": "{% set ${1:name} = ${2:value} %}$3",
    "description": "set lets you create/modify a variable."
  },
  "Set": {
    "prefix": "setend",
    "body": "{% set ${1:name} %}\n\t$2\n{% endset %}",
    "description": "set captures the contents of a block into a variable using block assignments."
  },
  "Macro": {
    "prefix": "macro",
    "body": "{% macro ${1:name}(${2:args}) %}\n\t$3\n{% endmacro %}",
    "description": "macro allows you to define reusable chunks of content. It is similar to a function in a programming language. "
  },
  "Import": {
    "prefix": "import",
    "body": "{% import \"${1:template}\" as ${2:var} %}$3",
    "description": "import loads a different template and allows you to access its exported values. Macros and top-level assignments (done with set) are exported from templates, allowing you to access them in a different template."
  },
  "From Import": {
    "prefix": "from",
    "body": "{% from \"${1:template}\" import ${2:macro} as ${3:var} %}$4",
    "description": "It imports specific values from a template into the current namespace."
  },
  "Verbatim": {
    "prefix": "verbatim",
    "body": "{% verbatim %}\n\t$1\n{% endverbatim %}",
    "description": "{% verbatim %} has identical behavior as {% raw %}. It is added for compatibility with the Twig verbatim tag."
  },
  "Raw": {
    "prefix": "raw",
    "body": "{% raw %}\n\t$1\n{% endraw %}",
    "description": "If you want to output any of the special nunjucks tags like {{, you can use raw and anything inside of it will be output as plain text."
  },
  "Call": {
    "prefix": "call",
    "body": "{% call ${1:macro} %}\n\t$2\n{% endcall %}",
    "description": "A call block enables you to call a macro with all the text inside the tag. This is helpful if you want to pass a lot of content into a macro. The content is available inside the macro as caller()."
  },
  "Alt Variable": {
    "prefix": "var",
    "body": "{{ ${1:var} }}",
    "description": "A variable looks up a value from the template context. If you wanted to simply display a variable, you would do: {{ username }}"
  },
  "Super": {
    "prefix": "super",
    "body": "{{ super() }}",
    "description": "You can render the contents of the parent block inside a child block by calling super."
  },
  "Or": {
    "prefix": "or",
    "body": "or",
    "description": "Logical or operator."
  },
  "Pipe": {
    "prefix": "pipe",
    "body": "| ${1:filter}",
    "description": "You can pass filters from the variable directly e.g. {{ foo | escape }}"
  },
  "Alt Pipe": {
    "prefix": "|",
    "body": "| ${1:filter}",
    "description": "You can pass filters from the variable directly e.g. {{ foo | escape }}"
  },
  "Comment": {
    "prefix": "comment",
    "body": "{# ${1:comment} #}\n",
    "description": "Nunjucks Comment"
  },
  "Comment Block": {
    "prefix": "cblock",
    "body": "{# \n\t${1:comment}\n#}\n",
    "description": "Nunjucks Comment"
  },
  "Alt Comment Block": {
    "prefix": "commentblock",
    "body": "{# \n\t${1:comment}\n#}\n",
    "description": "Nunjucks Comment"
  },
  "HTML Comment": {
    "prefix": "hcomm",
    "body": "<!-- \n\t${1:htmlComment}\n-->\n",
    "description": "HTML Comment"
  },
  "Alt HTML Comment": {
    "prefix": "commenthtml",
    "body": "<!-- \n\t${1:htmlComment}\n-->\n",
    "description": "HTML Comment"
  },
  "11ty: Edge": {
    "prefix": "edge",
    "body": "{% edge \"${1:language}\" %}\n\t${2: do edgy stuff}\n{% endedge %}",
    "description": "Eleventy Edge: A plugin to run Eleventy in an Edge Function to add dynamic content to your Eleventy sites."
  },
  "11ty: Image": {
    "prefix": "image",
    "body": "{% image \"${1:src},\" \n\t${2: alt}\n %}",
    "description": "Eleventy Image: A low level utility to perform image transformation for vector and raster images. See: https://www.11ty.dev/docs/plugins/image/#nunjucks-liquid-javascript-(asynchronous-shortcodes)"
  },
  "11ty: Render Template": {
    "prefix": "render",
    "body": "{% renderTemplate \"${1:language}\" %}\n\t$2\n{% endrenderTemplate %}",
    "description": "Use the `renderTemplate` paired shortcode to render a template string."
  },
  "11ty: RenderFile": {
    "prefix": "renderfile",
    "body": "{% renderfile \"${1:file path}\" %}",
    "description": "Use the`renderFile` shortcode to render an include file."
  },
  "11ty: Syntax Highlight": {
    "prefix": "highlight",
    "body": "{% highlight\"${1:language}\" %}\n\t$2\n{% endhighlight %}",
    "description": "Use the`highlight` paired shortcode to render syntax highlighting."
  },
  "11ty Filter: getCollectionItem": {
    "prefix": "|getCol",
    "body": "| getCollectionItem $1",
    "description": "Fetches the current page from a collection."
  },
  "11ty Filter: getNextCollectionItem": {
    "prefix": "|next",
    "body": "| getNextCollectionItem $1",
    "description": "Fetch the next items in a collection when you pass in the current `page` object."
  },
  "11ty Filter: getPreviousCollectionItem": {
    "prefix": "|prev",
    "body": "| getPreviousCollectionItem $1",
    "description": "Fetch the previous items in a collection when you pass in the current `page` object."
  },
  "11ty Filter: log": {
    "prefix": "|log",
    "body": "| log $1",
    "description": "`console.log` a value in your templates."
  },
  "11ty Filter: i18n local_url ": {
    "prefix": "i18url",
    "body": "| locale_url $1",
    "description": "Accepts any arbitrary URL string and transforms it using the current pageâ€™s locale."
  },
  "11ty Filter: i18n local_links ": {
    "prefix": "i18link",
    "body": "| locale_links $1",
    "description": "Returns an array of the relevant alternative content for a specified URL (or, defaults to the current page). "
  },
  "11ty Filter: slugify": {
    "prefix": "|slug",
    "body": "| slugify $1",
    "description": "Convert a string into a URL slug."
  },
  "11ty Filter: url": {
    "prefix": "|url",
    "body": "| url $1",
    "description": "Normalize absolute paths in your content, allows easily changing deploy subdirectories for your project."
  },
  "Filter: escape": {
    "prefix": "|esc",
    "body": "| escape $1",
    "description": "Use this if you need to display text that might contain such characters in HTML. Marks return value as markup string e.g. {{ foo | escape }}"
  },
  "Filter: safe": {
    "prefix": "|safe",
    "body": "| safe $1",
    "description": "Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped e.g. {{ foo | safe }}"
  },
  "Filter: abs": {
    "prefix": "|abs",
    "body": "| abs $1",
    "description": "Return the absolute value of the argument e.g. {{ -2 | abs }}"
  },
  "Filter: batch": {
    "prefix": "|batch",
    "body": "| batch($1) $2",
    "description": "Return a list of lists with the given number of items: e.g. see Nunjucks docs"
  },
  "Filter: capitalize": {
    "prefix": "|cap",
    "body": "| capitalize $2",
    "description": "Make the first letter uppercase, the rest lower case: e.g. {{ \"This Is A Test\" | capitalize }}"
  },
  "Filter: center": {
    "prefix": "|center",
    "body": "| center $2",
    "description": "Center the value in a field of a given width: e.g. {{ \"foo\" | center }}"
  },
  "Filter: default": {
    "prefix": "|def",
    "body": "| default($1, $2, $3) $4",
    "description": "If value is strictly undefined, return default, otherwise value. If boolean is true, any JavaScript falsy value will return default (false, \"\", etc) e.g. {{ foo | default('bar', true) }}"
  },
  "Filter: dictsort": {
    "prefix": "|dict",
    "body": "| dictsort $1",
    "description": "Sort a dict and yield (key, value) pairs: e.g. {{ {b: 2, a: 1} | dictsort }}"
  },
  "Filter: lower": {
    "prefix": "|low",
    "body": "| lower $1",
    "description": "Convert string to all lower case: e.g. {{ \"fooBar\" | lower }}"
  },
  "Filter: dump": {
    "prefix": "|dump",
    "body": "| dump $1",
    "description": "Call JSON.stringify on an object and dump the result into the template. Useful for debugging: {{ items | dump }}: e.g. {% set items = [\"a\", 1, { b : true}] %} {{ items | dump }}"
  }
}
